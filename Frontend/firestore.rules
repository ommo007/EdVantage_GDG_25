rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper function to check if the user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Helper function to check if the user is accessing their own data
    function isUser(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    // Helper function to check if the user is an admin
    function isAdmin() {
      return isAuthenticated() && 
             exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    // Helper function to check if the user is an instructor
    function isInstructor() {
      return isAuthenticated() && 
             exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'instructor';
    }
    
    // Rules for users collection
    match /users/{userId} {
      // Users can read their own data
      // Admins can read and write all user data
      allow read: if isUser(userId) || isAdmin();
      allow write: if isUser(userId) || isAdmin();
    }
    
    // Rules for classes collection
    match /classes/{classId} {
      // Anyone can read class data
      // Only instructors and admins can create classes
      // Only the class instructor or admin can update/delete
      allow read: if isAuthenticated();
      allow create: if isInstructor() || isAdmin();
      allow update, delete: if isAdmin() || 
                           (isInstructor() && resource.data.instructorId == request.auth.uid);
    }
    
    // Rules for enrollments collection
    match /enrollments/{enrollmentId} {
      // Students can read their own enrollments
      // Instructors can read enrollments for their classes
      // Admins can read all enrollments
      allow read: if isAdmin() || 
                  (isAuthenticated() && resource.data.userId == request.auth.uid) ||
                  (isInstructor() && 
                   exists(/databases/$(database)/documents/classes/$(resource.data.classId)) &&
                   get(/databases/$(database)/documents/classes/$(resource.data.classId)).data.instructorId == request.auth.uid);
      
      // Students can create enrollments for themselves
      // Instructors can update enrollments for their classes
      // Admins can do anything
      allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid;
      allow update: if isAdmin() ||
                    (isAuthenticated() && resource.data.userId == request.auth.uid) ||
                    (isInstructor() && 
                     exists(/databases/$(database)/documents/classes/$(resource.data.classId)) &&
                     get(/databases/$(database)/documents/classes/$(resource.data.classId)).data.instructorId == request.auth.uid);
      allow delete: if isAdmin();
    }
    
    // Rules for study_materials collection
    match /study_materials/{materialId} {
      // Anyone authenticated can read materials
      // Only instructors and admins can create/update/delete materials
      allow read: if isAuthenticated();
      allow create: if isInstructor() || isAdmin();
      allow update, delete: if isAdmin() || 
                           (isInstructor() && resource.data.instructorId == request.auth.uid);
    }
  }
}
